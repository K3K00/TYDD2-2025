// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/20/2025 15:48:40"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    MultiModyCA2
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module MultiModyCA2_vlg_sample_tst(
	A0,
	A1,
	B0,
	B1,
	clk,
	sampler_tx
);
input  A0;
input  A1;
input  B0;
input  B1;
input  clk;
output sampler_tx;

reg sample;
time current_time;
always @(A0 or A1 or B0 or B1 or clk)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module MultiModyCA2_vlg_check_tst (
	s0,
	s1,
	s2,
	s3,
	u0,
	u1,
	u2,
	u3,
	sampler_rx
);
input  s0;
input  s1;
input  s2;
input  s3;
input  u0;
input  u1;
input  u2;
input  u3;
input sampler_rx;

reg  s0_expected;
reg  s1_expected;
reg  s2_expected;
reg  s3_expected;
reg  u0_expected;
reg  u1_expected;
reg  u2_expected;
reg  u3_expected;

reg  s0_prev;
reg  s1_prev;
reg  s2_prev;
reg  s3_prev;
reg  u0_prev;
reg  u1_prev;
reg  u2_prev;
reg  u3_prev;

reg  s0_expected_prev;
reg  s1_expected_prev;
reg  s2_expected_prev;
reg  s3_expected_prev;
reg  u0_expected_prev;
reg  u1_expected_prev;
reg  u2_expected_prev;
reg  u3_expected_prev;

reg  last_s0_exp;
reg  last_s1_exp;
reg  last_s2_exp;
reg  last_s3_exp;
reg  last_u0_exp;
reg  last_u1_exp;
reg  last_u2_exp;
reg  last_u3_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:8] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 8'b1;
end

// update real /o prevs

always @(trigger)
begin
	s0_prev = s0;
	s1_prev = s1;
	s2_prev = s2;
	s3_prev = s3;
	u0_prev = u0;
	u1_prev = u1;
	u2_prev = u2;
	u3_prev = u3;
end

// update expected /o prevs

always @(trigger)
begin
	s0_expected_prev = s0_expected;
	s1_expected_prev = s1_expected;
	s2_expected_prev = s2_expected;
	s3_expected_prev = s3_expected;
	u0_expected_prev = u0_expected;
	u1_expected_prev = u1_expected;
	u2_expected_prev = u2_expected;
	u3_expected_prev = u3_expected;
end



// expected s0
initial
begin
	s0_expected = 1'bX;
end 

// expected s1
initial
begin
	s1_expected = 1'bX;
end 

// expected s2
initial
begin
	s2_expected = 1'bX;
end 

// expected s3
initial
begin
	s3_expected = 1'bX;
end 

// expected u0
initial
begin
	u0_expected = 1'bX;
end 

// expected u1
initial
begin
	u1_expected = 1'bX;
end 

// expected u2
initial
begin
	u2_expected = 1'bX;
end 

// expected u3
initial
begin
	u3_expected = 1'bX;
end 
// generate trigger
always @(s0_expected or s0 or s1_expected or s1 or s2_expected or s2 or s3_expected or s3 or u0_expected or u0 or u1_expected or u1 or u2_expected or u2 or u3_expected or u3)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected s0 = %b | expected s1 = %b | expected s2 = %b | expected s3 = %b | expected u0 = %b | expected u1 = %b | expected u2 = %b | expected u3 = %b | ",s0_expected_prev,s1_expected_prev,s2_expected_prev,s3_expected_prev,u0_expected_prev,u1_expected_prev,u2_expected_prev,u3_expected_prev);
	$display("| real s0 = %b | real s1 = %b | real s2 = %b | real s3 = %b | real u0 = %b | real u1 = %b | real u2 = %b | real u3 = %b | ",s0_prev,s1_prev,s2_prev,s3_prev,u0_prev,u1_prev,u2_prev,u3_prev);
`endif
	if (
		( s0_expected_prev !== 1'bx ) && ( s0_prev !== s0_expected_prev )
		&& ((s0_expected_prev !== last_s0_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s0_expected_prev);
		$display ("     Real value = %b", s0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_s0_exp = s0_expected_prev;
	end
	if (
		( s1_expected_prev !== 1'bx ) && ( s1_prev !== s1_expected_prev )
		&& ((s1_expected_prev !== last_s1_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s1_expected_prev);
		$display ("     Real value = %b", s1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_s1_exp = s1_expected_prev;
	end
	if (
		( s2_expected_prev !== 1'bx ) && ( s2_prev !== s2_expected_prev )
		&& ((s2_expected_prev !== last_s2_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s2_expected_prev);
		$display ("     Real value = %b", s2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_s2_exp = s2_expected_prev;
	end
	if (
		( s3_expected_prev !== 1'bx ) && ( s3_prev !== s3_expected_prev )
		&& ((s3_expected_prev !== last_s3_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s3_expected_prev);
		$display ("     Real value = %b", s3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_s3_exp = s3_expected_prev;
	end
	if (
		( u0_expected_prev !== 1'bx ) && ( u0_prev !== u0_expected_prev )
		&& ((u0_expected_prev !== last_u0_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port u0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", u0_expected_prev);
		$display ("     Real value = %b", u0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_u0_exp = u0_expected_prev;
	end
	if (
		( u1_expected_prev !== 1'bx ) && ( u1_prev !== u1_expected_prev )
		&& ((u1_expected_prev !== last_u1_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port u1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", u1_expected_prev);
		$display ("     Real value = %b", u1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_u1_exp = u1_expected_prev;
	end
	if (
		( u2_expected_prev !== 1'bx ) && ( u2_prev !== u2_expected_prev )
		&& ((u2_expected_prev !== last_u2_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port u2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", u2_expected_prev);
		$display ("     Real value = %b", u2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_u2_exp = u2_expected_prev;
	end
	if (
		( u3_expected_prev !== 1'bx ) && ( u3_prev !== u3_expected_prev )
		&& ((u3_expected_prev !== last_u3_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port u3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", u3_expected_prev);
		$display ("     Real value = %b", u3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_u3_exp = u3_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module MultiModyCA2_vlg_vec_tst();
// constants                                           
// general purpose registers
reg A0;
reg A1;
reg B0;
reg B1;
reg clk;
// wires                                               
wire s0;
wire s1;
wire s2;
wire s3;
wire u0;
wire u1;
wire u2;
wire u3;

wire sampler;                             

// assign statements (if any)                          
MultiModyCA2 i1 (
// port map - connection between master ports and signals/registers   
	.A0(A0),
	.A1(A1),
	.B0(B0),
	.B1(B1),
	.clk(clk),
	.s0(s0),
	.s1(s1),
	.s2(s2),
	.s3(s3),
	.u0(u0),
	.u1(u1),
	.u2(u2),
	.u3(u3)
);

// A0
initial
begin
	A0 = 1'b0;
	A0 = #50000 1'b1;
	A0 = #120000 1'b0;
	A0 = #80000 1'b1;
	A0 = #130000 1'b0;
end 

// A1
initial
begin
	A1 = 1'b0;
	A1 = #50000 1'b1;
	A1 = #120000 1'b0;
	A1 = #280000 1'b1;
	A1 = #130000 1'b0;
end 

// B0
initial
begin
	B0 = 1'b0;
	B0 = #50000 1'b1;
	B0 = #120000 1'b0;
	B0 = #80000 1'b1;
	B0 = #130000 1'b0;
end 

// B1
initial
begin
	B1 = 1'b0;
	B1 = #50000 1'b1;
	B1 = #120000 1'b0;
	B1 = #280000 1'b1;
	B1 = #130000 1'b0;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

MultiModyCA2_vlg_sample_tst tb_sample (
	.A0(A0),
	.A1(A1),
	.B0(B0),
	.B1(B1),
	.clk(clk),
	.sampler_tx(sampler)
);

MultiModyCA2_vlg_check_tst tb_out(
	.s0(s0),
	.s1(s1),
	.s2(s2),
	.s3(s3),
	.u0(u0),
	.u1(u1),
	.u2(u2),
	.u3(u3),
	.sampler_rx(sampler)
);
endmodule

