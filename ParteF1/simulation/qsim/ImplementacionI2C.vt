// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/27/2025 14:11:56"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Esquematico
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Esquematico_vlg_sample_tst(
	clk,
	SCL,
	SDA,
	sampler_tx
);
input  clk;
input  SCL;
input  SDA;
output sampler_tx;

reg sample;
time current_time;
always @(clk or SCL or SDA)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Esquematico_vlg_check_tst (
	Ack,
	fin_dato,
	fin_dir,
	Hab_Dat,
	Hab_dir,
	soy,
	sampler_rx
);
input  Ack;
input  fin_dato;
input  fin_dir;
input  Hab_Dat;
input  Hab_dir;
input  soy;
input sampler_rx;

reg  Ack_expected;
reg  fin_dato_expected;
reg  fin_dir_expected;
reg  Hab_Dat_expected;
reg  Hab_dir_expected;
reg  soy_expected;

reg  Ack_prev;
reg  fin_dato_prev;
reg  fin_dir_prev;
reg  Hab_Dat_prev;
reg  Hab_dir_prev;
reg  soy_prev;

reg  Ack_expected_prev;
reg  fin_dato_expected_prev;
reg  fin_dir_expected_prev;
reg  Hab_Dat_expected_prev;
reg  Hab_dir_expected_prev;
reg  soy_expected_prev;

reg  last_Ack_exp;
reg  last_fin_dato_exp;
reg  last_fin_dir_exp;
reg  last_Hab_Dat_exp;
reg  last_Hab_dir_exp;
reg  last_soy_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	Ack_prev = Ack;
	fin_dato_prev = fin_dato;
	fin_dir_prev = fin_dir;
	Hab_Dat_prev = Hab_Dat;
	Hab_dir_prev = Hab_dir;
	soy_prev = soy;
end

// update expected /o prevs

always @(trigger)
begin
	Ack_expected_prev = Ack_expected;
	fin_dato_expected_prev = fin_dato_expected;
	fin_dir_expected_prev = fin_dir_expected;
	Hab_Dat_expected_prev = Hab_Dat_expected;
	Hab_dir_expected_prev = Hab_dir_expected;
	soy_expected_prev = soy_expected;
end



// expected Ack
initial
begin
	Ack_expected = 1'bX;
end 

// expected Hab_Dat
initial
begin
	Hab_Dat_expected = 1'bX;
end 

// expected Hab_dir
initial
begin
	Hab_dir_expected = 1'bX;
end 

// expected fin_dato
initial
begin
	fin_dato_expected = 1'bX;
end 

// expected fin_dir
initial
begin
	fin_dir_expected = 1'bX;
end 

// expected soy
initial
begin
	soy_expected = 1'bX;
end 
// generate trigger
always @(Ack_expected or Ack or fin_dato_expected or fin_dato or fin_dir_expected or fin_dir or Hab_Dat_expected or Hab_Dat or Hab_dir_expected or Hab_dir or soy_expected or soy)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Ack = %b | expected fin_dato = %b | expected fin_dir = %b | expected Hab_Dat = %b | expected Hab_dir = %b | expected soy = %b | ",Ack_expected_prev,fin_dato_expected_prev,fin_dir_expected_prev,Hab_Dat_expected_prev,Hab_dir_expected_prev,soy_expected_prev);
	$display("| real Ack = %b | real fin_dato = %b | real fin_dir = %b | real Hab_Dat = %b | real Hab_dir = %b | real soy = %b | ",Ack_prev,fin_dato_prev,fin_dir_prev,Hab_Dat_prev,Hab_dir_prev,soy_prev);
`endif
	if (
		( Ack_expected_prev !== 1'bx ) && ( Ack_prev !== Ack_expected_prev )
		&& ((Ack_expected_prev !== last_Ack_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Ack :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Ack_expected_prev);
		$display ("     Real value = %b", Ack_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Ack_exp = Ack_expected_prev;
	end
	if (
		( fin_dato_expected_prev !== 1'bx ) && ( fin_dato_prev !== fin_dato_expected_prev )
		&& ((fin_dato_expected_prev !== last_fin_dato_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port fin_dato :: @time = %t",  $realtime);
		$display ("     Expected value = %b", fin_dato_expected_prev);
		$display ("     Real value = %b", fin_dato_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_fin_dato_exp = fin_dato_expected_prev;
	end
	if (
		( fin_dir_expected_prev !== 1'bx ) && ( fin_dir_prev !== fin_dir_expected_prev )
		&& ((fin_dir_expected_prev !== last_fin_dir_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port fin_dir :: @time = %t",  $realtime);
		$display ("     Expected value = %b", fin_dir_expected_prev);
		$display ("     Real value = %b", fin_dir_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_fin_dir_exp = fin_dir_expected_prev;
	end
	if (
		( Hab_Dat_expected_prev !== 1'bx ) && ( Hab_Dat_prev !== Hab_Dat_expected_prev )
		&& ((Hab_Dat_expected_prev !== last_Hab_Dat_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Hab_Dat :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Hab_Dat_expected_prev);
		$display ("     Real value = %b", Hab_Dat_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Hab_Dat_exp = Hab_Dat_expected_prev;
	end
	if (
		( Hab_dir_expected_prev !== 1'bx ) && ( Hab_dir_prev !== Hab_dir_expected_prev )
		&& ((Hab_dir_expected_prev !== last_Hab_dir_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Hab_dir :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Hab_dir_expected_prev);
		$display ("     Real value = %b", Hab_dir_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Hab_dir_exp = Hab_dir_expected_prev;
	end
	if (
		( soy_expected_prev !== 1'bx ) && ( soy_prev !== soy_expected_prev )
		&& ((soy_expected_prev !== last_soy_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port soy :: @time = %t",  $realtime);
		$display ("     Expected value = %b", soy_expected_prev);
		$display ("     Real value = %b", soy_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_soy_exp = soy_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Esquematico_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg SCL;
reg SDA;
// wires                                               
wire Ack;
wire fin_dato;
wire fin_dir;
wire Hab_Dat;
wire Hab_dir;
wire soy;

wire sampler;                             

// assign statements (if any)                          
Esquematico i1 (
// port map - connection between master ports and signals/registers   
	.Ack(Ack),
	.clk(clk),
	.fin_dato(fin_dato),
	.fin_dir(fin_dir),
	.Hab_Dat(Hab_Dat),
	.Hab_dir(Hab_dir),
	.SCL(SCL),
	.SDA(SDA),
	.soy(soy)
);

// SCL
always
begin
	SCL = 1'b0;
	SCL = #25000 1'b1;
	#25000;
end 

// SDA
initial
begin
	SDA = 1'b1;
	SDA = #10000 1'b0;
	SDA = #10000 1'b1;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

Esquematico_vlg_sample_tst tb_sample (
	.clk(clk),
	.SCL(SCL),
	.SDA(SDA),
	.sampler_tx(sampler)
);

Esquematico_vlg_check_tst tb_out(
	.Ack(Ack),
	.fin_dato(fin_dato),
	.fin_dir(fin_dir),
	.Hab_Dat(Hab_Dat),
	.Hab_dir(Hab_dir),
	.soy(soy),
	.sampler_rx(sampler)
);
endmodule

