// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/19/2025 20:29:21"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    MultiplicadorConSigno
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module MultiplicadorConSigno_vlg_sample_tst(
	A0,
	A1,
	B0,
	B1,
	clk,
	sampler_tx
);
input  A0;
input  A1;
input  B0;
input  B1;
input  clk;
output sampler_tx;

reg sample;
time current_time;
always @(A0 or A1 or B0 or B1 or clk)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module MultiplicadorConSigno_vlg_check_tst (
	p0,
	p1,
	p2,
	p3,
	sampler_rx
);
input  p0;
input  p1;
input  p2;
input  p3;
input sampler_rx;

reg  p0_expected;
reg  p1_expected;
reg  p2_expected;
reg  p3_expected;

reg  p0_prev;
reg  p1_prev;
reg  p2_prev;
reg  p3_prev;

reg  p0_expected_prev;
reg  p1_expected_prev;
reg  p2_expected_prev;
reg  p3_expected_prev;

reg  last_p0_exp;
reg  last_p1_exp;
reg  last_p2_exp;
reg  last_p3_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	p0_prev = p0;
	p1_prev = p1;
	p2_prev = p2;
	p3_prev = p3;
end

// update expected /o prevs

always @(trigger)
begin
	p0_expected_prev = p0_expected;
	p1_expected_prev = p1_expected;
	p2_expected_prev = p2_expected;
	p3_expected_prev = p3_expected;
end



// expected p0
initial
begin
	p0_expected = 1'bX;
end 

// expected p1
initial
begin
	p1_expected = 1'bX;
end 

// expected p2
initial
begin
	p2_expected = 1'bX;
end 

// expected p3
initial
begin
	p3_expected = 1'bX;
end 
// generate trigger
always @(p0_expected or p0 or p1_expected or p1 or p2_expected or p2 or p3_expected or p3)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected p0 = %b | expected p1 = %b | expected p2 = %b | expected p3 = %b | ",p0_expected_prev,p1_expected_prev,p2_expected_prev,p3_expected_prev);
	$display("| real p0 = %b | real p1 = %b | real p2 = %b | real p3 = %b | ",p0_prev,p1_prev,p2_prev,p3_prev);
`endif
	if (
		( p0_expected_prev !== 1'bx ) && ( p0_prev !== p0_expected_prev )
		&& ((p0_expected_prev !== last_p0_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p0_expected_prev);
		$display ("     Real value = %b", p0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_p0_exp = p0_expected_prev;
	end
	if (
		( p1_expected_prev !== 1'bx ) && ( p1_prev !== p1_expected_prev )
		&& ((p1_expected_prev !== last_p1_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p1_expected_prev);
		$display ("     Real value = %b", p1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_p1_exp = p1_expected_prev;
	end
	if (
		( p2_expected_prev !== 1'bx ) && ( p2_prev !== p2_expected_prev )
		&& ((p2_expected_prev !== last_p2_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p2_expected_prev);
		$display ("     Real value = %b", p2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_p2_exp = p2_expected_prev;
	end
	if (
		( p3_expected_prev !== 1'bx ) && ( p3_prev !== p3_expected_prev )
		&& ((p3_expected_prev !== last_p3_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p3_expected_prev);
		$display ("     Real value = %b", p3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_p3_exp = p3_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module MultiplicadorConSigno_vlg_vec_tst();
// constants                                           
// general purpose registers
reg A0;
reg A1;
reg B0;
reg B1;
reg clk;
// wires                                               
wire p0;
wire p1;
wire p2;
wire p3;

wire sampler;                             

// assign statements (if any)                          
MultiplicadorConSigno i1 (
// port map - connection between master ports and signals/registers   
	.A0(A0),
	.A1(A1),
	.B0(B0),
	.B1(B1),
	.clk(clk),
	.p0(p0),
	.p1(p1),
	.p2(p2),
	.p3(p3)
);

// A0
initial
begin
	A0 = 1'b0;
	A0 = #40000 1'b1;
	A0 = #140000 1'b0;
	A0 = #110000 1'b1;
	A0 = #140000 1'b0;
	A0 = #80000 1'b1;
	A0 = #130000 1'b0;
end 

// A1
initial
begin
	A1 = 1'b0;
	A1 = #40000 1'b1;
	A1 = #140000 1'b0;
end 

// B0
initial
begin
	B0 = 1'b0;
	B0 = #40000 1'b1;
	B0 = #140000 1'b0;
	B0 = #110000 1'b1;
	B0 = #140000 1'b0;
	B0 = #80000 1'b1;
	B0 = #130000 1'b0;
end 

// B1
initial
begin
	B1 = 1'b0;
	B1 = #40000 1'b1;
	B1 = #140000 1'b0;
	B1 = #330000 1'b1;
	B1 = #130000 1'b0;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

MultiplicadorConSigno_vlg_sample_tst tb_sample (
	.A0(A0),
	.A1(A1),
	.B0(B0),
	.B1(B1),
	.clk(clk),
	.sampler_tx(sampler)
);

MultiplicadorConSigno_vlg_check_tst tb_out(
	.p0(p0),
	.p1(p1),
	.p2(p2),
	.p3(p3),
	.sampler_rx(sampler)
);
endmodule

